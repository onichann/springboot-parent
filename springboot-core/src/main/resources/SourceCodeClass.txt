SingletonSupplier--单例获取supplier
ListenableFutureAdapter--适配器
FastClass--cglib代理类

String body = StreamUtils.copyToString(super.getInputStream(), StandardCharsets.UTF_8);

private ResolvableType resolveDefaultEventType(ApplicationEvent event) {
		return ResolvableType.forInstance(event);
}

public boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {
        return ApplicationReadyEvent.class.isAssignableFrom(eventType) || RefreshEvent.class.isAssignableFrom(eventType);
    }
    // ApplicationReadyEvent 是不是 eventType的父类  ，（监听的父类，子类的消息就也会有了）


GenericApplicationListenerAdapter  --75行  判定listener监听的事件类型 与 收到的事件是否一个类型

或者用
for(final IListener listener : tempLlisteners){
						ParameterizedType genericSuperclass = (ParameterizedType) listener.getClass().getGenericInterfaces()[0];
						Class<?> eventClass = (Class<?>) genericSuperclass.getActualTypeArguments()[0];
						if(event.getClass().equals(eventClass)){
							listener.event(event);
						}
					}

事件监听  guava EventBus




服务端请求  服务器  rsa公钥加密 aes key

客户端 rsa私钥解密 得到aes key  用aes加密 body数据  发送 + sha256摘要算法 body数据（通过request-hash header传输）

服务端 aes key 解密 获得 摘要算法密文 然后和 header的摘要密文比对是否相同


私钥加签（发送给客户）   公钥解签
公钥加密  私钥解密


加签的目的：验证信息的发送方是否正确，信息是否被其他人篡改。

之所以用发送方的私钥加签，是因为，即便信息被黑客拦截，黑客修改了信息，但是加签需要用发送方的私钥，黑客没有发送方的私钥，所以也无法生成正确的签名，接收方验签就不用通过。

反之如果用接收方的公钥加签，如果信息被黑客拦截，黑客修改了信息，因为接收方的公钥是公开的，黑客就可以重新生成新的签名，替换原有的签名，发送出去，接收方接收到信息，拿自己的公钥校验是通过的，所以接收方无法辨别信息是真正的发送方还是黑客发送过来的，这样的加签不能辨别信息是否被篡改过



加密的目的：保证信息的隐私，不被别人看到，只能让接收方看到正确的信息。

之所以用接收方的公钥加密，是因为，如果信息被黑客拦截，需要用接收方的私钥来解密，黑客无法获取接收方的私钥，即便拦截了信息（情报），黑客也无法看到明文，只能看天书📚了。

反之，如果用发送方的私钥加密，如果信息被黑客拦截，因为发送方的公钥是公开的，黑客就可以用发送方的公钥解密密文获得明文，这样的加密所有的人都可以看到明文，不能保证信息的隐私。


为了自己系统安全 要求对方给公钥 ，私钥加签 否则采取 给对方公钥加密 自己私钥解密 ，然后定义一个hash摘要算法


