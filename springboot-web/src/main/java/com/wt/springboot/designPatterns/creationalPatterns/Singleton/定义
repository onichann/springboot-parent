创建型
    -单例模式
    -工厂模式
    -原型模式
    -生成器模式/建造者模式
结构型
    -适配器模式
    -装饰者模式
    -代理模式
    -外观模式
    -桥接模式



*单例模式--是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。
通过单例模式可以保证系统中一个类只有一个实例。即一个类只有一个对象实例。

*工厂模式--是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。

工厂模式根据抽象程度的不同分为三种：

简单工厂模式（也叫静态工厂模式）

工厂方法模式（也叫多形性工厂）

抽象工厂模式（也叫工具箱）

*原型模式--通过复制现有的对象实例来创建新的对象实例。

*生成器模式--将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
生成器模式利用一个导演者对象和具体建造者对象一个一个地建造出所有的零件，从而建造出完整的对象。

四个要素：

        Builder：生成器接口，定义创建一个Product对象所需要的各个部件的操作。

        ConcreteBuilder：具体的生成器实现，实现各个部件的创建，并负责组装Product对象的各个部件，同时还提供一个让用户获取组装完成后的产品对象的方法。

        Director：指导者，也被称导向者，主要用来使用Builder接口，以一个统一的过程来构建所需要的Product对象。

        Product：产品，表示被生成器构建的复杂对象，包含多个部件。

*适配器模式--将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。

*装饰者模式--在不必改变原类文件和原类使用的继承的情况下，动态地扩展一个对象的功能。

            它是通过创建一个包装对象，也就是用装饰来包裹真实的对象来实现。

            角色：

                抽象构件角色（Project）：给出一个接口，以规范准备接收附加责任的对象。

                具体构件角色（Employe）：定义一个将要接收附加责任的类。

                装饰角色（Manager）：持有一个构件对象的实例，并定义一个与抽象构件接口一致的接口。

                具体装饰角色（ManagerA、ManagerB）：负责给构件对象“贴上”附加的责任。
*代理模式--为其他对象提供一种代理以控制对这个对象的访问。
在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用

角色：

1，  抽象角色：声明真实对象和代理对象的共同接口。

2，  代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。

3，  真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。


*外观模式--为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用


外观模式总结：

1、外观模式为复杂子系统提供了一个简单接口，并不为子系统添加新的功能和行为。

2、外观模式实现了子系统与客户端之间的松耦合关系。

3、外观模式没有封装子系统的类，只是提供了简单的接口。 如果应用需要，它并不限制客户使用子系统类。因此可以灵活的在系统易用性与通用性之间选择。

4、外观模式注重的是简化接口，它更多的时候是从架构的层次去看整个系统，而并非单个类的层次。

*桥接模式--将抽象部分与实现部分分离，使它们都可以独立的变化。
